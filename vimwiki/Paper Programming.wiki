= Paper Programming =

A big component of this course is the idea
of being able to read and understand what
a piece of code is doing without executing
it.

Code can quickly become confusing, and can
overwhelm you when trying to take it all in
at once. Instead of trying to understand the code
by reading it like a book (which I am sure you
will be able to do with practice), I advocate
for you to go to the dark ages of pen and paper
and actually write down what the code is doing
step by step.

Here's an example of how that could look:

{{{
foo = 4
bar = foo * foo
foo = bar - 1
print(bar - foo)
}}}

Take your piece of paper and draw 3 boxes, each
with enough room to write several lines of sentences
inside of them.

Now write names above the boxes. The names are foo, bar,
and output.

Finally, copy the code from the example onto your paper.

Now we will 'execute' the code in our minds, and on our paper.

{{{
foo = 4
}}}

For this, just write _4_ into the _foo_ box on your paper.
That was easy, so good so far.

{{{
bar = foo * foo
}}}

Okay. For this one, write another equals sign after _foo * foo_
and replace _foo_ with the value we have for it (4) so that you
got _4 * 4_

Great, now write another equals sign after _4 * 4_ to complete the
operation. The final value is 16 and what we have really is
_bar = 16_

Write "16" into the box of _bar_

{{{
foo = bar - 1
}}}

Repeat the steps you just took to evaluate _bar = foo * foo_ for this
one:

_foo = bar - 1 = 16 - 1 = 15_

Now write _15_ below the _4_ you had previously written
into the _foo_ box and cross out the _4_.

{{{
print(bar - foo)
}}}

Evaluate this in a similar manner as above:

_print(bar - foo) = print(16 - 15) = print(1)_

Print as we learned in the first lesson displays the text you provided
to the terminal or STDOUT (standard output).

At this final step, just write _1_ into the box of _output_

Congratulations, you just executed code without using a computer!

= Wrap up =

This example was not intended to be overly
complex, but was just meant to show how to evaluate code
on paper. However, as I'm sure you have seen, code
can become very complex. If you take a methodical approach
like this to help you understand and reason about the
code, you should gradually be able to evaluate more
and more complex code by hand on paper and consequentially
be able to simply read code like a book
